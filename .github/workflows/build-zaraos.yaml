name: Build ZaraOS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore cache)'
        type: boolean
        default: false

jobs:
  build-os:
    runs-on: [gideon, zaraos, builder]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Clean workspace
        run: |
          rm -rf output || true
          rm -rf /tmp/zaraos-build || true
          rm -rf /tmp/ccache || true
          rm -rf /tmp/zaraos-dl || true

      - name: Setup buildroot
        run: |
          echo "Installing build dependencies"
          sudo apt-get update
          sudo apt-get install -y bc file cpio unzip rsync wget python3 python3-dev \
            build-essential autoconf automake libtool pkg-config \
            libncurses5-dev libssl-dev bison flex

          echo "Copying buildroot submodule to /opt/buildroot"
          sudo rm -rf /opt/buildroot
          sudo cp -r ZaraOS/buildroot /opt/buildroot
          ls -la /opt/buildroot/

      - name: Get CPU count and optimize parallelism
        id: cpu-count
        run: |
          CPU_COUNT=$(nproc)
          # Use 75% of available CPUs, minimum 2, maximum 8
          JOBS=$(echo "$CPU_COUNT * 0.75" | bc | cut -d. -f1)
          JOBS=$(( JOBS < 2 ? 2 : JOBS ))
          JOBS=$(( JOBS > 24 ? 24 : JOBS ))
          echo "jobs=$JOBS" >> $GITHUB_OUTPUT
          echo "Using $JOBS parallel jobs (CPU count: $CPU_COUNT)"

      - name: Build ZaraOS
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          CONFIG_SHELL: /bin/bash
        run: |
          echo "Building ZaraOS with ${{ steps.cpu-count.outputs.jobs }} parallel jobs"

          # Set up build directories
          BUILD_DIR="/tmp/zaraos-build"
          DL_DIR="/tmp/zaraos-dl"
          mkdir -p "$BUILD_DIR" "$DL_DIR" output

          # Configure buildroot with explicit shell
          CONFIG_SHELL=/bin/bash make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            zaraos_pi5_defconfig

          # Build the OS
          CONFIG_SHELL=/bin/bash make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            -j${{ steps.cpu-count.outputs.jobs }} \
            V=1

          # Copy artifacts
          if [ -d "$BUILD_DIR/images" ]; then
            echo "Copying build artifacts..."
            cp -r "$BUILD_DIR/images"/* output/
          fi

          echo "Build complete!"

      - name: Verify build artifacts
        run: |
          if [[ ! -f "output/sdcard.img" ]]; then
            echo "ERROR: Missing sdcard.img"
            exit 1
          fi
          echo "Build completed successfully"
          ls -la output/

      - name: Upload ZaraOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zaraos-build-${{ github.run_number }}
          path: |
            output/sdcard.img
            output/Image
            output/rootfs.ext4
            output/*.dtb
            output/boot.vfat
          retention-days: 30

      - name: Generate release tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tag
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          TAG="v${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated release tag: ${TAG}"

      - name: Create ZaraOS Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ZaraOS ${{ steps.tag.outputs.tag }}
          body: |
            **ZaraOS** - Embedded operating system for Raspberry Pi

            ## Installation

            Flash the SD card image:
            ```
            dd if=sdcard.img of=/dev/sdX bs=4M status=progress
            ```

            ## Asset

            - `sdcard.img`: Complete SD card image

            **Commit:** [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          files: |
            output/sdcard.img
            output/Image
            output/rootfs.ext4
            output/*.dtb
            output/boot.vfat
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf /tmp/zaraos-build || true
          rm -rf /tmp/zaraos-dl || true
