name: Build ZaraOS

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore cache)'
        type: boolean
        default: false

jobs:
  build-os:
    runs-on: [gideon, zaraos, builder]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache buildroot downloads
        uses: actions/cache@v4
        with:
          path: /tmp/zaraos-dl
          key: buildroot-dl-${{ hashFiles('ZaraOS/configs/zaraos_pi5_defconfig') }}
          restore-keys: |
            buildroot-dl-

      - name: Setup buildroot
        run: |
          echo "Copying buildroot submodule to /opt/buildroot"
          sudo rm -rf /opt/buildroot
          sudo cp -r ZaraOS/buildroot /opt/buildroot
          ls -la /opt/buildroot/

      - name: Clean workspace
        if: github.event.inputs.clean_build == 'true'
        run: |
          rm -rf output || true
          rm -rf /tmp/zaraos-build || true

      - name: Get CPU count and optimize parallelism
        id: cpu-count
        run: |
          CPU_COUNT=$(nproc)
          # Use 75% of available CPUs, minimum 2, maximum 8
          JOBS=$(echo "$CPU_COUNT * 0.75" | bc | cut -d. -f1)
          JOBS=$(( JOBS < 2 ? 2 : JOBS ))
          JOBS=$(( JOBS > 8 ? 8 : JOBS ))
          echo "jobs=$JOBS" >> $GITHUB_OUTPUT
          echo "Using $JOBS parallel jobs (CPU count: $CPU_COUNT)"

      - name: Build ZaraOS
        env:
          FORCE_UNSAFE_CONFIGURE: 1
        run: |
          echo "Building ZaraOS with ${{ steps.cpu-count.outputs.jobs }} parallel jobs"

          # Set up build directories
          BUILD_DIR="/tmp/zaraos-build"
          DL_DIR="/tmp/zaraos-dl"
          mkdir -p "$BUILD_DIR" "$DL_DIR" output

          # Configure buildroot
          make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            zaraos_pi5_defconfig

          # Build the OS with maximum parallelism
          make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            -j${{ steps.cpu-count.outputs.jobs }} \
            HOSTCC="ccache gcc" \
            HOSTCXX="ccache g++"

          # Copy artifacts
          if [ -d "$BUILD_DIR/images" ]; then
            echo "Copying build artifacts..."
            cp -r "$BUILD_DIR/images"/* output/
          fi

          echo "Build complete!"

      - name: Verify build artifacts
        run: |
          if [[ ! -f "output/sdcard.img" ]]; then
            echo "ERROR: Missing sdcard.img"
            exit 1
          fi
          echo "Build completed successfully"
          ls -la output/

      - name: Upload ZaraOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zaraos-build-${{ github.run_number }}
          path: |
            output/sdcard.img
            output/Image
            output/rootfs.ext4
            output/*.dtb
            output/boot.vfat
          retention-days: 30

      # Save cache after successful build
      - name: Post-build cache cleanup
        if: always()
        run: |
          # Clean unnecessary files to keep cache size manageable
          find /tmp/zaraos-build -name "*.o" -delete 2>/dev/null || true
          find /tmp/zaraos-build -name "*.a" -delete 2>/dev/null || true

      - name: Cleanup
        if: always()
        run: rm -rf /tmp/zaraos-build/target || true
