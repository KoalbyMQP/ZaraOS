name: Build ZaraOS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore cache)'
        type: boolean
        default: false

jobs:
  build-os:
    runs-on: [gideon, zaraos, builder]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache buildroot downloads
        uses: actions/cache@v4
        with:
          path: /tmp/zaraos-dl
          key: buildroot-dl-${{ hashFiles('ZaraOS/configs/zaraos_pi5_defconfig') }}
          restore-keys: |
            buildroot-dl-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: /tmp/ccache
          key: ccache-${{ github.run_number }}
          restore-keys: |
            ccache-

      - name: Setup buildroot
        run: |
          echo "Installing build dependencies"
          sudo apt-get update
          sudo apt-get install -y ccache bc file cpio unzip rsync wget python3 python3-dev \
            build-essential autoconf automake libtool pkg-config \
            libncurses5-dev libssl-dev bison flex

          echo "Setting up ccache"
          mkdir -p /tmp/ccache
          ccache --set-config=cache_dir=/tmp/ccache
          ccache --set-config=max_size=2G
          ccache --set-config=compression=true
          ccache --zero-stats
          ccache --show-config

          echo "Copying buildroot submodule to /opt/buildroot"
          sudo rm -rf /opt/buildroot
          sudo cp -r ZaraOS/buildroot /opt/buildroot
          ls -la /opt/buildroot/

      - name: Clean workspace
        if: github.event.inputs.clean_build == 'true'
        run: |
          rm -rf output || true
          rm -rf /tmp/zaraos-build || true
          rm -rf /tmp/ccache || true

      - name: Get CPU count and optimize parallelism
        id: cpu-count
        run: |
          CPU_COUNT=$(nproc)
          # Use 75% of available CPUs, minimum 2, maximum 8
          JOBS=$(echo "$CPU_COUNT * 0.75" | bc | cut -d. -f1)
          JOBS=$(( JOBS < 2 ? 2 : JOBS ))
          JOBS=$(( JOBS > 24 ? 24 : JOBS ))
          echo "jobs=$JOBS" >> $GITHUB_OUTPUT
          echo "Using $JOBS parallel jobs (CPU count: $CPU_COUNT)"

      - name: Build ZaraOS
        env:
          FORCE_UNSAFE_CONFIGURE: 1
          CONFIG_SHELL: /bin/bash
          CCACHE_DIR: /tmp/ccache
          PATH: /usr/lib/ccache:/usr/local/bin:/usr/bin:/bin
        run: |
          echo "Building ZaraOS with ${{ steps.cpu-count.outputs.jobs }} parallel jobs"
          echo "ccache stats before build:"
          ccache --show-stats

          # Set up build directories
          BUILD_DIR="/tmp/zaraos-build"
          DL_DIR="/tmp/zaraos-dl"
          mkdir -p "$BUILD_DIR" "$DL_DIR" output

          # Configure buildroot with explicit shell and ccache
          CONFIG_SHELL=/bin/bash make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            zaraos_pi5_defconfig

          # Build the OS with ccache enabled
          CONFIG_SHELL=/bin/bash make -C /opt/buildroot \
            O="$BUILD_DIR" \
            BR2_DL_DIR="$DL_DIR" \
            BR2_EXTERNAL="$(pwd)/ZaraOS" \
            -j${{ steps.cpu-count.outputs.jobs }} \
            V=1

          echo "ccache stats after build:"
          ccache --show-stats

          # Copy artifacts
          if [ -d "$BUILD_DIR/images" ]; then
            echo "Copying build artifacts..."
            cp -r "$BUILD_DIR/images"/* output/
          fi

          echo "Build complete!"

      - name: Verify build artifacts
        run: |
          if [[ ! -f "output/sdcard.img" ]]; then
            echo "ERROR: Missing sdcard.img"
            exit 1
          fi
          echo "Build completed successfully"
          ls -la output/

      - name: Upload ZaraOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zaraos-build-${{ github.run_number }}
          path: |
            output/sdcard.img
            output/Image
            output/rootfs.ext4
            output/*.dtb
            output/boot.vfat
          retention-days: 30

      - name: Generate release tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tag
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          TAG="v${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated release tag: ${TAG}"

      - name: Create ZaraOS Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ZaraOS ${{ steps.tag.outputs.tag }}
          body: |
            ## ZaraOS Release ${{ steps.tag.outputs.tag }}

            Automated build from commit ${{ github.sha }}

            ### Build Information
            - **Branch**: main
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Build Number**: ${{ github.run_number }}

            ### Included Files
            - `sdcard.img` - Complete SD card image for Raspberry Pi
            - `Image` - Linux kernel image
            - `rootfs.ext4` - Root filesystem
            - `*.dtb` - Device tree blobs for various Pi models
            - `boot.vfat` - Boot partition image

            ### Installation
            Flash the `sdcard.img` to an SD card using tools like Raspberry Pi Imager or `dd`.
          files: |
            output/sdcard.img
            output/Image
            output/rootfs.ext4
            output/*.dtb
            output/boot.vfat
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Save cache after successful build
      - name: Post-build cache cleanup
        if: always()
        run: |
          # Clean unnecessary files to keep cache size manageable
          find /tmp/zaraos-build -name "*.o" -delete 2>/dev/null || true
          find /tmp/zaraos-build -name "*.a" -delete 2>/dev/null || true

      - name: Cleanup
        if: always()
        run: rm -rf /tmp/zaraos-build/target || true
